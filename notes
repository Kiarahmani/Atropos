====================================================================================================
TODO:
 

  
  - Add support for inbuilt agg functions (instead of having size, sum, etc.)
  - Add a comment section to each program to capture its refactoring history 
  - Analyze the encoding engine and figure out why it works so slowly on CRDT
    version (I don't think it is justified)
  - (syntactical) support for aggregating queries
  - support for ATOMIC ops and range operations 
  - support for for loops
  - BUG: the true/else path conditions are mistaken discarded

** refactoring tasks
  - Generalize aggregate functions (currently we only have sum and size)
  - Make sure there is no problem in carrying path conditions to the new
    (modified) queries -- right now I think I am not doing anything about it

====================================================================================================
ASSUMPTIONS:
  - only one VC between each pair of tables
  - CRDT tables only have 3 columns


====================================================================================================
IMPROVEMENTS:
  - It seems that we can separate two scenarios where CRDT-like solutions could
    be utilized:
      1- classic read-modify case: such is increment a bank account
      2- direct updates to a value: such as zeroing a bank account (which does
         not depend on the initial value of the account)
    We may be able to get rid of some unnecessary anomalies by deploying the
    latter kind of solution in our search algorithm (imagine a new field where
    capture if the inserted record is of the first type or the latter)

   
  - Currently we assume inserts do write in *all* fields. This means that even
    when a simple increment row is insert into a balance table, it can have
    conflicts on the id field with other rows. This is unnecessary if we know
    that inserts are only used to keep records of updates and will not introduce new
    ids.
    For instance the below conflict graph is unnecessary. 

    ## TRANSACTIONS:
    DepositChecking(dc_custName, dc_amount){
      (0) SELECT0 (a_custid)  FROM accounts   AS DepositChecking_v0 WHERE (a_name=dc_custName âˆ§ is_alive=true)
      (1) ATOMIC INSERT0 INTO accounts   VALUES (proj(a_custid,DepositChecking_v0,1),null,uuid,dc_amount,false,true)
    }
    ## CONFLICT GRAPH:
      <DepositChecking.SELECT#0,DepositChecking.INSERT#0,accounts,[a_custid, is_alive]>
   
